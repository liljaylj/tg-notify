#!/usr/bin/env bash
# vim: sw=4 ts=4 et ai

## Notify using Telegram Bot API.
## Extra dependencies:
## - bash
## - coreutils
## - util-linux
## - sed
## - curl
## - jq

## You can change configuration using environment variables. Define them or you
## can place env vars in `tgn-env.sh` file which must be located in current
## working directory. tg-notify will source it overriding any environment vars
## default values.
## Here are config variables with defaults:
##   TGN_TRACE - print every command executed by this script. Default: unset
##   TGN_TOKEN - override saved token. Default: unset
##   TGN_POLL_TIMEOUT - poll timeout when getting updates from Telegram. Default: 300 (seconds)
##   TGN_PARSE_MODE - parse mode for message (plain, markdown, html, md1). Default: plain

set -Eeuo pipefail
shopt -s lastpipe

if [[ -f "$(pwd)/tgn-env.sh" ]]; then
    # shellcheck source=./tgn-env.sh.example
    source "$(pwd)/tgn-env.sh"
fi

## when enabled prints every command executed
if [[ -n "${TGN_TRACE:-}" ]]; then
    set -x
fi

## print version information
print_version() {
    echo "$app_name $app_version"
}

## print usage information
usage() {
    print_version
    echo
    echo "Usage:" >&2
    echo >&2
    echo "$bin_name set-token                                           set Bot API token" >&2
    echo "$bin_name remove-token                                        remove Bot API token" >&2
    echo "$bin_name add|add-chat                                        add chat to chat-list" >&2
    echo "$bin_name ls|list-chats                                       print chat-list" >&2
    echo "$bin_name rm|remove-chat [chat id]                            remove chat from chat-list" >&2
    echo "$bin_name e|edit|edit-chat-list                               open chat-list with default editor" >&2
    echo "$bin_name [-f|--format <format>] send [msg] [*chat ids]       send message" >&2
    echo "$bin_name -v|--version|version                                print version information" >&2
    echo "$bin_name -h|--help|usage|help                                display this help message" >&2
    echo >&2
    echo 'Format options:' >&2
    echo >&2
    echo '    2|m|md|markdown       - MarkdownV2' >&2
    echo '    h|html                - HTML' >&2
    echo '    1|o|old|markdown1     - Markdown' >&2
    echo >&2
    echo 'Note: You can replace "-" prefix in group ID with "@" or enter it after --.' >&2
    exit "${1:-0}"
}

parse_arg_format() {
    case "$1" in
    2 | m | md | markdown)
        parse_mode=MarkdownV2
        ;;
    h | html)
        parse_mode=HTML
        ;;
    1 | o | old | markdown1)
        parse_mode=Markdown
        ;;
    *)
        echo "Wrong format option '$1'."
        usage 1
        ;;
    esac
}

parse_args() {
    OPTIND=1
    while getopts ':hvf:-:' opt; do
        case "$opt" in
        f)
            parse_arg_format "$OPTARG"
            ;;
        v)
            print_version
            exit
            ;;
        h)
            usage
            ;;
        -)
            local longarg
            case "$OPTARG" in
            format)
                longarg="${!OPTIND}"
                parse_arg_format "$longarg"
                OPTIND="$((OPTIND + 1))"
                ;;
            format=*)
                longarg="${OPTARG#*=}"
                parse_arg_format "$longarg"
                ;;
            version)
                print_version
                exit
                ;;
            help)
                usage
                ;;
            *)
                echo "ERROR: Unsupported flag: '--$OPTARG'" >&2
                ;;
            esac
            ;;
        *)
            echo "ERROR: Unsupported flag: '-$OPTARG'" >&2
            usage 1
            ;;
        esac
    done
    optind="$OPTIND"
}

## curl version compatibility
curl_compat() {
    local curl_version
    local curl_v_major
    local curl_v_minor
    # local curl_v_patch
    curl_version="$(curl -V | head -1 | cut -d' ' -f2)"
    curl_v_major="$(cut -d. -f1 <<<"$curl_version")"
    curl_v_minor="$(cut -d. -f2 <<<"$curl_version")"
    # curl_v_patch="$(cut -d. -f3 <<<"$curl_version")"
    if [[ "$curl_v_major" -lt 7 || ("$curl_v_major" -eq 7 && "$curl_v_minor" -lt 76) ]]; then
        curl_param_fail='--fail'
    else
        curl_param_fail='--fail-with-body'
    fi
}

## set token to a state file
set-token() {
    read -rp 'Bot API token: ' token
    echo "$token" >"$token_file"
}

## delete token state file
remove-token() {
    rm -f "$token_file"
}

## load token from file
load-token() {
    if ! [[ -f "$token_file" ]]; then
        if ! [[ -t 0 ]]; then
            echo 'ERROR: Bot API token not found. Use "set-token" command.' >&2
            exit 1
        fi
        set-token
    fi
    read -r token <"$token_file"
    if [[ -z "${token:-}" ]]; then
        if ! [[ -t 0 ]]; then
            echo 'ERROR: Bot API token not found. Use "set-token" command.' >&2
            exit 1
        fi
        set-token
        load-token
    fi
    base_uri="https://api.telegram.org/bot${token}"
    bot_name="$(jq -er '.result.username' <<<"$(curl -LSsg "$curl_param_fail" "$base_uri/getMe")")"
}

## interactive add chat to chat list
add-chat() {
    if [[ -z "${token:-}" ]]; then
        load-token
    fi
    local msg
    msg="/connect@$bot_name $(uuidgen)"
    local format='"\(.id) \(.title // .username)"'

    echo 'Paste the string below to Telegram chat you willing to post notifications to.'
    echo
    echo "$msg"
    echo

    local updates_offset=-1
    while true; do
        local updates
        updates="$(curl -LSsg "$curl_param_fail" \
            \
            -d "offset=$updates_offset" \
            -d "timeout=$poll_timeout" \
            -d 'allowed_updates=["messages"]' \
            \
            "$base_uri/getUpdates")"
        updates_offset="$(jq -e '.result[-1] | .update_id + 1' <<<"$updates")"
        local chat
        if chat="$(jq -er ".result[] | .message // .edited_message | select(.text == \"$msg\" or .text == \"$msg\") | .chat | $format" <<<"$updates")"; then
            local chat_id chat_name
            read -r chat_id chat_name <<<"$chat"
            touch "$chat_list_file"
            local chat_id_f
            while read -r chat_id_f _; do
                if [[ "$chat_id" == "$chat_id_f" ]]; then
                    echo "'$chat_name' is already in chat list"
                    return
                fi
            done <"$chat_list_file"
            echo "$chat" >>"$chat_list_file"
            echo "Added '$chat_name' to chat list."
            return
        fi
    done
}

## list available chats
list-chats() {
    echo "Chat list:"
    local idx=1 chat_id chat_name
    while read -r chat_id chat_name; do
        echo "(%${idx}) ${chat_id}: $chat_name"
        idx=$((idx + 1))
    done <"$chat_list_file"
}

## remove chat from list
remove-chat() {
    local chat_id
    if [[ -n "${1:-}" ]]; then
        chat_id="$1"
    else
        read -rp 'Chat ID to remove: ' chat_id
    fi
    sed -i "/^${chat_id/#@/-}/d" "$chat_list_file"
}

## edit chat list with default editor
edit-chat-list() {
    local editor="${VISUAL:-"${EDITOR:-}"}"
    if command -v sensible-editor >/dev/null; then
        editor=sensible-editor
    fi
    if [[ -z "$editor" ]]; then
        for e in nvim vim vi nano; do
            if command -v "$e" >/dev/null; then
                editor="$e"
                break
            fi
        done
    fi
    if [[ -z "$editor" ]]; then
        echo 'ERROR: Cannot determine sensible editor.' >&2
        echo
        echo "Set default editor with \$VISUAL or \$EDITOR environment variables." >&2
        exit
    fi
    "$editor" "$chat_list_file"
}

send-message() {
    printf "Sending message to '%s'... " "$3"
    local result
    if result="$(
        curl -LSsg "$curl_param_fail" \
            \
            -d "chat_id=$2" \
            -d "text=$1" \
            -d "parse_mode=$parse_mode" \
            \
            "$base_uri/sendMessage" 2>/dev/null
    )"; then
        echo 'OK'
    else
        echo 'FAIL'
        jq '.' <<<"$result"
    fi
}

# send message
send() {
    if [[ -z "${token:-}" ]]; then
        load-token
    fi
    local msg
    if [[ -n "${1:-}" ]]; then
        msg="$1"
        shift
    elif [[ -t 0 ]]; then
        read -rp 'Message: ' msg
    else
        msg="$(cat)"
    fi

    local idx=1 chat_id chat_name
    while read -r chat_id chat_name; do
        if [[ "$#" -gt 0 ]]; then
            local chat_id_arg
            for chat_id_arg in "$@"; do
                chat_id_arg="${chat_id_arg/#@/-}"
                if [[ "$chat_id_arg" == '%'* ]] &&
                    [[ "$idx" == "${chat_id_arg#%}" ]] ||
                    [[ "$chat_id" == "$chat_id_arg"* ]]; then
                    send-message "$msg" "$chat_id" "$chat_name"
                fi
            done
        else
            send-message "$msg" "$chat_id" "$chat_name"
        fi
        idx=$((idx + 1))
    done <"$chat_list_file"
}

# application name
app_name='tg-notify'
# application version
app_version='0.2.0'

# binary name
bin_name="$(basename "$0")"

# application state dir
state_dir="${XDG_STATE_HOME:-"$HOME/.local/state"}"
app_state_dir="$state_dir/$app_name"

# initialize state dir
mkdir -p "$app_state_dir"
chmod 700 "$state_dir"
chmod 700 "$app_state_dir"

# file to store Bot API token
token_file="$app_state_dir/token"
# file to store chat-list
chat_list_file="$app_state_dir/chat-list"

# global variables
# base uri
base_uri=
# bot username
bot_name=

# config
# Bot API token
token="${TGN_TOKEN:-}"
# long polling timeout for getUpdates request
poll_timeout="${TGN_POLL_TIMEOUT:-300}"
# parse mode
parse_mode="${TGN_PARSE_MODE:-}"

# read command line options
optind=1
parse_args "$@"
shift "$((optind - 1))"

if [[ -n "${1:-}" ]]; then
    cmd="$1"
    shift
fi

declare -a cmd_args
while [[ "$#" -gt 0 ]]; do
    optind=1
    parse_args "$@"
    shift "$((optind - 1))"
    if [[ -n "${1:-}" ]]; then
        cmd_args+=("$1")
        shift
    fi
done

curl_param_fail='--fail-with-body'

# curl version compatibility
curl_compat

# command to perform
case "${cmd:-usage}" in
set-token)
    set-token
    ;;
remove-token)
    remove-token
    ;;
add | add-chat)
    add-chat
    ;;
ls | list-chats)
    list-chats
    ;;
rm | remove-chat)
    remove-chat "${cmd_args[@]}"
    ;;
e | edit | edit-chat-list)
    edit-chat-list
    ;;
send)
    send "${cmd_args[@]}"
    ;;
version)
    print_version
    exit
    ;;
usage | help)
    usage
    ;;
*)
    echo "ERROR: Unknown command '$cmd'" >&2
    usage 1
    ;;
esac
